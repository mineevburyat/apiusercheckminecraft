import asyncio
from aiogram import Bot, Dispatcher
from app.handlers import router
import logging  # –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python
from bot_logging.middleware import UserActionsMiddleware  # ‚Üê –ò–ó–ú–ï–ù–ò–õ
from bot_logging.logger_config import setup_logging       # ‚Üê –ò–ó–ú–ï–ù–ò–õ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()

import configparser 
config = configparser.ConfigParser()
config.read('config.ini')

BOT_TOKEN = config['BOT']['BOT_TOKEN'].strip()

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –∫ router
    logging_middleware = UserActionsMiddleware()
    router.message.middleware(logging_middleware)
    router.callback_query.middleware(logging_middleware)
    
    dp.include_router(router)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.getLogger('user_actions').info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.getLogger(__name__).critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        logging.getLogger('user_actions').info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.getLogger('user_actions').info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("–í–æ—Ç —Ç–∞–∫ –∏ —Å–∫–∞–∑–æ—á–∫–µ –∫–æ–Ω–µ—Ü!")